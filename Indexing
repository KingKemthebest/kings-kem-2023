In Python, indexing refers to accessing individual elements within a data structure, such as a string, list, or tuple, by their position or index.

Python indexing starts from 0, which means the first element in a sequence has an index of 0, the second element has an index of 1, and so on.

For instance, to access a specific character in a string, we can use square brackets [] with the index of the character we want to access. For example:

my_string = "Hello, World!"
print(my_string[0])  # Output: H
print(my_string[7])  # Output: W
Similarly, we can access elements in a list or a tuple by their index, as shown in the following examples:

my_list = [1, 2, 3, 4, 5]
print(my_list[0])  # Output: 1
print(my_list[3])  # Output: 4

my_tuple = (10, 20, 30, 40, 50)
print(my_tuple[1])  # Output: 20
print(my_tuple[4])  # Output: 50
In addition to accessing individual elements, we can also use indexing to access a range of elements within a data structure, known as slicing.
Slicing allows us to create a new object that contains only a portion of the original data. For example:

my_string = "Hello, World!"
print(my_string[0:5])  # Output: Hello
print(my_string[7:])   # Output: World!
In this case, my_string[0:5] returns a new string that contains the characters from index 0 up to (but not including) index 5, which is "Hello".
my_string[7:] returns a new string that contains the characters from index 7 to the end of the string, which is "World!".
